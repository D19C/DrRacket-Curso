(define (menu)
  (newline)
  (display "1. Codificar codigo Morse\n")
  (display "2. Decodificar codigo Morse\n")
  (display "3. Salir\n")
  (define opc (read))
  (cond
    ((= opc 1)(texto))
    ((= opc 2)(morse))
    ))



(define (decodificar n mo i tex)

  
  
  (if (< i n)
  (if (and (eq? (string-ref tex i) #\/) (eq? (string-ref tex (- i 1)) #\/))
     (begin
      (display " ")
      (decodificar n "" (+ i 1) tex)
      )
      (begin
        (if (eq? (string-ref tex i) #\/)
            (begin
              (cond
                ((string=? mo ".-") (display "a"))
                ((string=? mo "-...") (display "b"))
                ((string=? mo "-.-.") (display "c"))
                ((string=? mo "-..") (display "d"))
                ((string=? mo ".") (display "e"))
                ((string=? mo "..-.") (display "f"))
                ((string=? mo "--.") (display "g"))
                ((string=? mo "....") (display "h"))
                ((string=? mo "..") (display "i"))
                ((string=? mo ".---") (display "j"))
                ((string=? mo "-.-") (display "k"))
                ((string=? mo ".-..") (display "l"))
                ((string=? mo "--") (display "m"))
                ((string=? mo "-.") (display "n"))
                ((string=? mo "---") (display "o"))
                ((string=? mo ".--.") (display "p"))
                ((string=? mo "--.-") (display "q"))
                ((string=? mo ".-.") (display "r"))
                ((string=? mo "...") (display "s"))
                ((string=? mo "-") (display "t"))
                ((string=? mo "..-") (display "u"))
                ((string=? mo "...-") (display "v"))
                ((string=? mo ".--") (display "w"))
                ((string=? mo "-..-") (display "x"))
                ((string=? mo "-.--") (display "y"))
                ((string=? mo "--..") (display "z"))
                ((string=? mo ".----") (display "1"))
                ((string=? mo "..---") (display "2"))
                ((string=? mo "...--") (display "3"))
                ((string=? mo "....-") (display "4"))
                ((string=? mo ".....") (display "5"))
                ((string=? mo "-....") (display "6"))
                ((string=? mo "--...") (display "7"))
                ((string=? mo "---..") (display "8"))
                ((string=? mo "----.") (display "9"))
                ((string=? mo "-----") (display "0"))
                )
              (decodificar n "" (+ i 1) tex)
              )
            (decodificar n (string-append mo (substring tex i (+ i 1))) (+ i 1) tex)
            ))
      )
  ))
      







      
(define (codificar n i tex)
  (if (< i n)
      (begin
      (cond
        ((eq? (string-ref tex i) #\a) (display ".-"))
        ((eq? (string-ref tex i) #\b)(display "-..."))
        ((eq? (string-ref tex i) #\c)(display "-.-."))
        ((eq? (string-ref tex i) #\d)(display "-.."))
        ((eq? (string-ref tex i) #\e)(display "."))
        ((eq? (string-ref tex i) #\f)(display "..-."))
        ((eq? (string-ref tex i) #\g)(display "--."))
        ((eq? (string-ref tex i) #\h)(display "...."))
        ((eq? (string-ref tex i) #\i)(display ".."))
        ((eq? (string-ref tex i) #\j)(display ".---"))
        ((eq? (string-ref tex i) #\k)(display "-.-"))
        ((eq? (string-ref tex i) #\l)(display ".-.."))
        ((eq? (string-ref tex i) #\m)(display "--"))
        ((eq? (string-ref tex i) #\n)(display "-."))
        ((eq? (string-ref tex i) #\o)(display "---"))
        ((eq? (string-ref tex i) #\p)(display ".--."))
        ((eq? (string-ref tex i) #\q)(display "--.-"))
        ((eq? (string-ref tex i) #\r)(display ".-."))
        ((eq? (string-ref tex i) #\s)(display "..."))
        ((eq? (string-ref tex i) #\t)(display "-"))
        ((eq? (string-ref tex i) #\u)(display "..-"))
        ((eq? (string-ref tex i) #\v)(display "...-"))
        ((eq? (string-ref tex i) #\w)(display ".--"))
        ((eq? (string-ref tex i) #\x)(display "-..-"))
        ((eq? (string-ref tex i) #\y)(display "-.--"))
        ((eq? (string-ref tex i) #\z)(display "--.."))
        ((eq? (string-ref tex i) #\1) (display ".----"))
        ((eq? (string-ref tex i) #\2) (display "..---"))
        ((eq? (string-ref tex i) #\3) (display "...--"))
        ((eq? (string-ref tex i) #\4) (display "....-"))
        ((eq? (string-ref tex i) #\5) (display "....."))
        ((eq? (string-ref tex i) #\6) (display "-...."))
        ((eq? (string-ref tex i) #\7) (display "--..."))
        ((eq? (string-ref tex i) #\8) (display "---.."))
        ((eq? (string-ref tex i) #\9) (display "----."))
        ((eq? (string-ref tex i) #\0) (display "-----"))
        )
      (display "/")
      (codificar n (+ i 1) tex))
      ))

(define (texto)
  (read-line)
  (display "escriba el texto para convertir\n")(define tx (read-line))
  (codificar (string-length tx) 0 tx)
  (menu)
  )
(define (morse)
  (read-line)
  (display "escriba el codigo con un / al final de cada caracter y dos // para espaciar\n")(define tx (read-line))
  (decodificar (string-length tx) "" 0 tx)
  (menu)
  
  )

(menu)
      